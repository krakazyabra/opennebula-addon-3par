#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2019, FeldHostâ„¢ (feldhost.net)                                   #
# Copyright 2021, WEDOS Internet a.s. (wedos.com)                            #
#                                                                            #
# Portions copyright OpenNebula Project (OpenNebula.org), CG12 Labs          #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
# -------------------------------------------------------------------------- #

###############################################################################
# This script is used to clone an image
###############################################################################

# -------- Set up the environment to source common tools & conf ------------

if [ -z "${ONE_LOCATION}" ]; then
    LIB_LOCATION=/usr/lib/one
else
    LIB_LOCATION=$ONE_LOCATION/lib
fi

. $LIB_LOCATION/sh/scripts_common.sh

DRIVER_PATH=$(dirname $0)
UTILS_PATH="${DRIVER_PATH}/.."
source ${DRIVER_PATH}/../libfs.sh
source ${DRIVER_PATH}/../../etc/datastore/3par/3par.conf
. ${DRIVER_PATH}/scripts_3par.sh

source ${DRIVER_PATH}/../../etc/datastore/linstor_un/linstor_un.conf
source ${DRIVER_PATH}/../linstor_un/linstor_utils.sh



# -------- Get cp and datastore arguments from OpenNebula core ------------

DRV_ACTION=$1
ID=$2

XPATH="${DRIVER_PATH}/../xpath.rb -b $DRV_ACTION"

unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <($XPATH     /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/ENCRYPTION \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/BRIDGE_LIST \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/API_ENDPOINT \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/IP \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/PORTALS \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/PORTALS_NUM \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/CPG \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/THIN \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/DEDUP \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/COMPRESSION \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/NAMING_TYPE \
                    /DS_DRIVER_ACTION_DATA/IMAGE/NAME \
                    /DS_DRIVER_ACTION_DATA/IMAGE/SIZE \
                    /DS_DRIVER_ACTION_DATA/IMAGE/CLONING_ID)

ENCRYPTION="${XPATH_ELEMENTS[j++]}"
BRIDGE_LIST="${XPATH_ELEMENTS[j++]}"
DST_API_ENDPOINT="${XPATH_ELEMENTS[j++]:-$API_ENDPOINT}"
DST_IP="${XPATH_ELEMENTS[j++]:-$IP}"
DST_PORTALS="${XPATH_ELEMENTS[j++]:-$PORTALS}"
DST_PORTALS_NUM="${XPATH_ELEMENTS[j++]:-$PORTALS_NUM}"
DST_CPG="${XPATH_ELEMENTS[j++]:-$CPG}"
DST_THIN="${XPATH_ELEMENTS[j++]:-$THIN}"
DST_DEDUP="${XPATH_ELEMENTS[j++]:-$DEDUP}"
DST_COMPRESSION="${XPATH_ELEMENTS[j++]:-$COMPRESSION}"
DST_NAMING_TYPE="${XPATH_ELEMENTS[j++]:-$NAMING_TYPE}"
NAME="${XPATH_ELEMENTS[j++]}"
SIZE="${XPATH_ELEMENTS[j++]}"
CLONING_ID="${XPATH_ELEMENTS[j++]}"

DST_HOST=`get_destination_host $ID`

if [ -z "$DST_HOST" ]; then
    error_message "Datastore template missing 'BRIDGE_LIST' attribute."
    exit -1
fi

# Get source image properties
XPATH="${DRIVER_PATH}/../../datastore/xpath.rb --stdin"
unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(oneimage show -x $CLONING_ID| $XPATH \
                    /IMAGE/DATASTORE_ID)

SRC_DSID=${XPATH_ELEMENTS[j++]}

SRC_RES="one-image-${CLONING_ID}"
SRC_DEV="/dev/drbd/by-res/${SRC_RES}/0"

SIZE=$($LINSTOR -m --output-version v0 volume-definition list -r "$SRC_RES" | $JQ -r '.[].rsc_dfns[0].vlm_dfns[0].vlm_size' | awk '{printf "%3.0f\n", ($1/1024)+2}')

# Get source datastore properties
XPATH="${DRIVER_PATH}/../../datastore/xpath.rb --stdin"
unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(onedatastore show -x $SRC_DSID | $XPATH \
             /DATASTORE/TEMPLATE/BRIDGE_LIST \
             /DATASTORE/TEMPLATE/RESTRICTED_DIRS \
             /DATASTORE/TEMPLATE/BRIDGE_LIST \
             /DATASTORE/TEMPLATE/STAGING_DIR \
             /DATASTORE/TEMPLATE/LS_CONTROLLERS \
             /DATASTORE/TEMPLATE/LS_CERTFILE \
             /DATASTORE/TEMPLATE/LS_KEYFILE \
             /DATASTORE/TEMPLATE/LS_CAFILE \
             /DATASTORE/TEMPLATE/RESOURCE_GROUP \
             /DATASTORE/TEMPLATE/NODE_LIST \
             /DATASTORE/TEMPLATE/LAYER_LIST \
             /DATASTORE/TEMPLATE/PROVIDERS \
             /DATASTORE/TEMPLATE/REPLICAS_ON_SAME \
             /DATASTORE/TEMPLATE/REPLICAS_ON_DIFFERENT \
             /DATASTORE/TEMPLATE/AUTO_PLACE \
             /DATASTORE/TEMPLATE/REPLICA_COUNT \
             /DATASTORE/TEMPLATE/DO_NOT_PLACE_WITH \
             /DATASTORE/TEMPLATE/DO_NOT_PLACE_WITH_REGEX \
             /DATASTORE/TEMPLATE/STORAGE_POOL \
             /DATASTORE/TEMPLATE/DISKLESS_POOL)

BRIDGE_LIST="${XPATH_ELEMENTS[j++]}"
RESTRICTED_DIRS="${XPATH_ELEMENTS[j++]}"
BRIDGE_LIST="${XPATH_ELEMENTS[j++]}"
STAGING_DIR="${XPATH_ELEMENTS[j++]:-$STAGING_DIR}"
LS_CONTROLLERS="${XPATH_ELEMENTS[j++]}"
LS_CERTFILE="${XPATH_ELEMENTS[j++]}"
LS_KEYFILE="${XPATH_ELEMENTS[j++]}"
LS_CAFILE="${XPATH_ELEMENTS[j++]}"
RESOURCE_GROUP="${XPATH_ELEMENTS[j++]}"
NODE_LIST="${XPATH_ELEMENTS[j++]}"
LAYER_LIST="${XPATH_ELEMENTS[j++]}"
PROVIDERS="${XPATH_ELEMENTS[j++]}"
REPLICAS_ON_SAME="${XPATH_ELEMENTS[j++]}"
REPLICAS_ON_DIFFERENT="${XPATH_ELEMENTS[j++]}"
AUTO_PLACE="${XPATH_ELEMENTS[j++]}"
REPLICA_COUNT="${XPATH_ELEMENTS[j++]:-$AUTO_PLACE}"
DO_NOT_PLACE_WITH="${XPATH_ELEMENTS[j++]}"
DO_NOT_PLACE_WITH_REGEX="${XPATH_ELEMENTS[j++]}"
STORAGE_POOL="${XPATH_ELEMENTS[j++]}"
DISKLESS_POOL="${XPATH_ELEMENTS[j++]:-DfltDisklessStorPool}"

if [ -z "$RESOURCE_GROUP" ]; then
    if [ -z "$NODE_LIST" ] && [ -z "$REPLICA_COUNT" ]; then
        error_message "Datastore template missing 'RESOURCE_GROUP', 'NODE_LIST' or 'REPLICA_COUNT' attribute."
        exit -1
    fi
    if [ -z "$STORAGE_POOL" ]; then
        error_message "Datastore template missing 'STORAGE_POOL' attribute."
        exit -1
    fi
fi

linstor_load_keys

# -------- Clone image from linsto to 3par ------------

if [ -z "$DST_HOST" ]; then
    error_message "Datastore template missing 'BRIDGE_LIST' attribute."
    exit -1
fi

if [ -z $DST_PORTALS ]; then
    DST_PORTALS=$(${DRIVER_PATH}/../../datastore/3par/3par.py getIscsiPortals -a $DST_API_ENDPOINT -i $DST_IP -s $SECURE -u $USERNAME \
                                                                -p $PASSWORD ${DST_PORTALS_NUM:+--sort YES})
    if [ $? -ne 0 ]; then
        error_message "$DST_PORTALS"
        exit 1
    fi
fi


# Create image
DST_NAME_WWN=$(${DRIVER_PATH}/3par.py createVV -a $DST_API_ENDPOINT -i $DST_IP -s $SECURE -u $USERNAME -p $PASSWORD -nt $DST_NAMING_TYPE \
                                            -tpvv $DST_THIN -tdvv $DST_DEDUP -compr $DST_COMPRESSION -id $ID -c $DST_CPG -sz $SIZE -co "$IMAGE_NAME")

if [ $? -ne 0 ]; then
  error_message "$DST_NAME_WWN"
  exit 1
fi

DST_NAME=$(get_vv_name "$DST_NAME_WWN")
DST_WWN=$(get_vv_wwn "$DST_NAME_WWN")

DST_HOST_ISCSI_NAME=$($SSH $DST_HOST sudo cat /etc/iscsi/initiatorname.iscsi | awk -F= '{print $2}')
DST_HOST_3PAR=$(${DRIVER_PATH}/../../datastore/3par/3par.py setupHost -a $DST_API_ENDPOINT -i $DST_IP -s $SECURE -u $USERNAME -p $PASSWORD \
  -hs $DST_HOST -in $DST_HOST_ISCSI_NAME)

if [ $? -ne 0 ]; then
  error_message "$DST_HOST_3PAR"
  exit 1
fi

ssh_exec_and_log "$DST_HOST" "$(iscsi_login "$DST_PORTALS" "$DST_PORTALS_NUM")"

LOCK_FILE="/var/lock/one/3par-attach-${DST_HOST}-${DST_NAME}.lock"
( umask 0027; touch "${LOCK_FILE}" 2>/dev/null )

# open lockfile
{ exec {FD}>"${LOCK_FILE}"; } 2>/dev/null
if [ $? -ne 0 ]; then
    log_error "Could not create or open lock ${LOCK_FILE}"
    exit -2
fi

# acquire lock
flock -s "${FD}" 2>/dev/null
if [ $? -ne 0 ]; then
    log_error "Could not acquire shared lock on ${LOCK_FILE}"
    exit -2
fi

# Map image
log "Mapping $SRC_RES to $DST_HOST"

if linstor_attach_diskless "$DST_HOST" "$SRC_RES" "$DISKLESS_POOL"; then
    LINSTOR_CLEANUP_RES+=" $DST_HOST:$SRC_RES"
fi

# Map image
log "Mapping $DST_WWN to $DST_HOST"

DST_LUN=$(${DRIVER_PATH}/3par.py exportVV -a $DST_API_ENDPOINT -i $DST_IP -s $SECURE -u $USERNAME -p $PASSWORD -n $DST_NAME -hs $DST_HOST)

if [ $? -ne 0 ]; then
  error_message "$DST_LUN"
  exit 1
fi

DISCOVER_CMD=$(cat <<EOF
    set -e
    $(discover_lun "$DST_LUN" "$DST_WWN")
    echo "\$DEV"
EOF
)

ssh_exec_and_log "$DST_HOST" "$DISCOVER_CMD" \
    "Error registering $DST_WWN to $DST_HOST"

# copy image
COPY_CMD=$(cat <<EOF
    set -e -o pipefail
    dd \if=$SRC_DEV bs=${DD_BLOCK_SIZE:-64k} of=/dev/mapper/3$DST_WWN bs=${DD_BLOCK_SIZE:-64k} conv=${DD_CONV:-sparse}
    sync
EOF
)

ssh_forward ssh_exec_and_log "$DST_HOST" "$COPY_CMD" \
    "Error copying $DST_WWN to $DST_WWN in $DST_HOST"

if flock -n "${FD}" 2>/dev/null; then
    # Unmap image
    log "Unmapping $DST_WWN from $DST_HOST"

    FLUSH_CMD=$(cat <<EOF
        set -e
        $(remove_lun "$DST_WWN")
EOF
)

    ssh_exec_and_log "$DST_HOST" "$FLUSH_CMD" \
        "Error flushing out mapping"


    ${DRIVER_PATH}/3par.py unexportVV -a $DST_API_ENDPOINT -i $DST_IP -s $SECURE -u $USERNAME -p $PASSWORD -n $DST_NAME -hs $DST_HOST

    ${DRIVER_PATH}/../../datastore/3par/3par.py deleteHost -a $DST_API_ENDPOINT -i $DST_IP -s $SECURE -u $USERNAME -p $PASSWORD \
                                                            -hs $DST_HOST >/dev/null

    if [ $? -eq 0 ]; then
        ssh_exec_and_log "$DST_HOST" "$(iscsi_logout "$DST_PORTALS")"
    fi
fi

# release lock
eval "exec ${FD}>&-"
if flock -n "${FD}" 2>/dev/null; then
    rm -f "$LOCK_FILE"
fi

# Unmap image
log "Unmapping $DST_WWN from $DST_HOST"

FLUSH_CMD=$(cat <<EOF
    set -e
    $(remove_lun "$DST_WWN")
EOF
)

ssh_exec_and_log "$DST_HOST" "$FLUSH_CMD" \
    "Error flushing out mapping"

${DRIVER_PATH}/3par.py unexportVV -a $DST_API_ENDPOINT -i $DST_IP -s $SECURE -u $USERNAME -p $PASSWORD -n $DST_NAME -hs $DST_HOST

${DRIVER_PATH}/../../datastore/3par/3par.py deleteHost -a $DST_API_ENDPOINT -i $DST_IP -s $SECURE -u $USERNAME -p $PASSWORD \
                                                        -hs $DST_HOST >/dev/null

if [ $? -eq 0 ]; then
    ssh_exec_and_log "$DST_HOST" "$(iscsi_logout "$DST_PORTALS")"
fi

echo "$DST_NAME_WWN"
