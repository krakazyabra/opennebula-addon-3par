#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2019, FeldHostâ„¢ (feldhost.net)                                   #
# Copyright 2021, WEDOS Internet a.s. (wedos.com)                            #
#                                                                            #
# Portions copyright 2014-2016, Laurent Grawet <dev@grawet.be>               #
# Portions copyright OpenNebula Project (OpenNebula.org), CG12 Labs          #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
# -------------------------------------------------------------------------- #

###############################################################################
# This script is used to move images/directories across system_ds in different hosts. When used for the system datastore the script will received the directory 
###############################################################################

# MV <hostA:system_ds/disk.i|hostB:system_ds/disk.i> vmid dsid
#    <hostA:system_ds/|hostB:system_ds/>
#   - hostX is the target host to deploy the VM
#   - system_ds is the path for the system datastore in the host
#   - vmid is the id of the VM
#   - dsid is the target datastore (0 is the system datastore)

# ------------ Set up the environment to source common tools ------------

if [ -z "${ONE_LOCATION}" ]; then
    TMCOMMON=/var/lib/one/remotes/tm/tm_common.sh
else
    TMCOMMON=$ONE_LOCATION/var/remotes/tm/tm_common.sh
fi

. $TMCOMMON

DRIVER_PATH=$(dirname $0)

source ${DRIVER_PATH}/../../etc/datastore/3par/3par.conf
. ${DRIVER_PATH}/../../datastore/3par/scripts_3par.sh

source ${DRIVER_PATH}/../../datastore/libfs.sh
source ${DRIVER_PATH}/../../etc/datastore/linstor_un/linstor_un.conf
source ${DRIVER_PATH}/../../datastore/linstor_un/linstor_utils.sh

# -------- Get mv and datastore arguments from OpenNebula core ------------

SRC=$1
DST=$2

VMID=$3
DSID=$4 # image ds

SRC=`fix_dir_slashes $SRC`
DST=`fix_dir_slashes $DST`

SRC_PATH=`arg_path $SRC`
DST_PATH=`arg_path $DST`

SRC_HOST=`arg_host $SRC`
DST_HOST=`arg_host $DST`

DST_DIR=`dirname $DST_PATH`

SRC_DS_DIR=`dirname  $SRC_PATH`
SRC_VM_DIR=`basename $SRC_PATH`

SRC_DIR=`dirname $SRC_PATH`
DST_DIR=`dirname $DST_PATH`

if [ "$SRC" = "$DST" ]; then
    log "Not moving $SRC to $DST, they are the same path"
    exit 0
fi

LCM_STATE=`lcm_state`

#-------------------------------------------------------------------------------
# Get image information
#-------------------------------------------------------------------------------

if [ `is_disk $SRC_PATH` -eq 0 ]; then
    SRC_DSID=$(echo $SRC_PATH | $AWK -F '/' '{print $(NF-1)}')
    DST_DSID=$(echo $DST_PATH | $AWK -F '/' '{print $(NF-1)}')
else
    SRC_DSID=$(echo $SRC_PATH | $AWK -F '/' '{print $(NF-2)}')
    DST_DSID=$(echo $DST_PATH | $AWK -F '/' '{print $(NF-2)}')
    DISK_ID=$(echo "$SRC_PATH" | $AWK -F. '{print $NF}')
    
    XPATH="${DRIVER_PATH}/../../datastore/xpath.rb --stdin"
    
    unset i j XPATH_ELEMENTS
    
    while IFS= read -r -d '' element; do
        XPATH_ELEMENTS[i++]="$element"
    done < <(onevm show -x $VMID| $XPATH \
                        /VM/NAME \
                        /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/SOURCE \
                        /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/IMAGE_ID \
                        /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/IMAGE \
                        /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/CLONE \
                        /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/PERSISTENT)
    
    VM_NAME="${XPATH_ELEMENTS[j++]}"
    SRC_NAME_WWN="${XPATH_ELEMENTS[j++]}"
    IMAGE_ID="${XPATH_ELEMENTS[j++]}"
    IMAGE="${XPATH_ELEMENTS[j++]}"
    CLONE="${XPATH_ELEMENTS[j++]}"
    PERSISTENT="${XPATH_ELEMENTS[j++]}"
    
    # Disk os clone or volatile, so copy was created
    if [ "$CLONE" = "YES" ] || [ -z "$SRC_NAME_WWN" ]; then
        VOLATILE=YES
        SRC_RES="one-vm-${VMID}-disk-$DISK_ID"
    else
        SRC_DSID=$DSID
        DST_DSID=$DSID
        SRC_RES="one-image-${IMAGE_ID}"
    fi

    SIZE=$($LINSTOR -m --output-version v0 volume-definition list -r "$SRC_RES" | $JQ -r '.[].rsc_dfns[0].vlm_dfns[0].vlm_size' | awk '{printf "%3.0f\n", ($1/1024)+2}')
    SRC_DEV="/dev/drbd/by-res/${SRC_RES}/0"

fi

#-------------------------------------------------------------------------------
# Get source ds information
#-------------------------------------------------------------------------------

XPATH="${DRIVER_PATH}/../../datastore/xpath.rb --stdin"

unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(onedatastore show -x $SRC_DSID | $XPATH \
                    /DATASTORE/TM_MAD \
                    /DATASTORE/TEMPLATE/BRIDGE_LIST \
                    /DATASTORE/TEMPLATE/LS_CONTROLLERS \
                    /DATASTORE/TEMPLATE/LS_CERTFILE \
                    /DATASTORE/TEMPLATE/LS_KEYFILE \
                    /DATASTORE/TEMPLATE/LS_CAFILE \
                    /DATASTORE/TEMPLATE/RESOURCE_GROUP \
                    /DATASTORE/TEMPLATE/NODE_LIST \
                    /DATASTORE/TEMPLATE/LAYER_LIST \
                    /DATASTORE/TEMPLATE/PROVIDERS \
                    /DATASTORE/TEMPLATE/REPLICAS_ON_SAME \
                    /DATASTORE/TEMPLATE/REPLICAS_ON_DIFFERENT \
                    /DATASTORE/TEMPLATE/AUTO_PLACE \
                    /DATASTORE/TEMPLATE/REPLICA_COUNT \
                    /DATASTORE/TEMPLATE/DO_NOT_PLACE_WITH \
                    /DATASTORE/TEMPLATE/DO_NOT_PLACE_WITH_REGEX \
                    /DATASTORE/TEMPLATE/STORAGE_POOL \
                    /DATASTORE/TEMPLATE/DISKLESS_POOL \
                    /DATASTORE/TEMPLATE/ENCRYPTION)

SRC_TM_MAD="${XPATH_ELEMENTS[j++]}"
BRIDGE_LIST="${XPATH_ELEMENTS[j++]}"
LS_CONTROLLERS="${XPATH_ELEMENTS[j++]}"
LS_CERTFILE="${XPATH_ELEMENTS[j++]}"
LS_KEYFILE="${XPATH_ELEMENTS[j++]}"
LS_CAFILE="${XPATH_ELEMENTS[j++]}"
RESOURCE_GROUP="${XPATH_ELEMENTS[j++]}"
NODE_LIST="${XPATH_ELEMENTS[j++]}"
LAYER_LIST="${XPATH_ELEMENTS[j++]}"
PROVIDERS="${XPATH_ELEMENTS[j++]}"
REPLICAS_ON_SAME="${XPATH_ELEMENTS[j++]}"
REPLICAS_ON_DIFFERENT="${XPATH_ELEMENTS[j++]}"
AUTO_PLACE="${XPATH_ELEMENTS[j++]}"
REPLICA_COUNT="${XPATH_ELEMENTS[j++]:-$AUTO_PLACE}"
DO_NOT_PLACE_WITH="${XPATH_ELEMENTS[j++]}"
DO_NOT_PLACE_WITH_REGEX="${XPATH_ELEMENTS[j++]}"
STORAGE_POOL="${XPATH_ELEMENTS[j++]}"
DISKLESS_POOL="${XPATH_ELEMENTS[j++]:-DfltDisklessStorPool}"
ENCRYPTION="${XPATH_ELEMENTS[j++]}"

unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(onevm show -x $VMID | $XPATH \
                    /VM/LCM_STATE)

LCM_STATE="${XPATH_ELEMENTS[j++]}"

linstor_load_keys

#-------------------------------------------------------------------------------
# Get destination ds information
#-------------------------------------------------------------------------------



if [ "$CLONE" = "YES" ] || [ -z "$SRC_NAME_WWN" ]; then
    if [ "$SRC_TM_MAD" != "linstor_un" ]; then
        error_message "Source datastore TM_MAD is not linstor_un"
        exit 1
    fi
else
    if [ "$SRC_TM_MAD" != "3par" ]; then
        error_message "Source datastore TM_MAD is not 3par (it should be set to 3par to transfer persistent images)"
        exit 1
    fi
fi

XPATH="${DRIVER_PATH}/../../datastore/xpath.rb --stdin"

unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(onedatastore show -x $DST_DSID | $XPATH \
                    /DATASTORE/TM_MAD \
                    /DATASTORE/TEMPLATE/API_ENDPOINT \
                    /DATASTORE/TEMPLATE/IP \
                    /DATASTORE/TEMPLATE/CPG \
                    /DATASTORE/TEMPLATE/THIN \
                    /DATASTORE/TEMPLATE/DEDUP \
                    /DATASTORE/TEMPLATE/COMPRESSION \
                    /DATASTORE/TEMPLATE/NAMING_TYPE \
                    /DATASTORE/TEMPLATE/PORTALS \
                    /DATASTORE/TEMPLATE/PORTALS_NUM \
                    /DATASTORE/TEMPLATE/QOS_ENABLE \
                    /DATASTORE/TEMPLATE/QOS_PRIORITY \
                    /DATASTORE/TEMPLATE/QOS_MAX_IOPS \
                    /DATASTORE/TEMPLATE/QOS_MIN_IOPS \
                    /DATASTORE/TEMPLATE/QOS_MAX_BW \
                    /DATASTORE/TEMPLATE/QOS_MIN_BW \
                    /DATASTORE/TEMPLATE/QOS_LATENCY)

DST_TM_MAD="${XPATH_ELEMENTS[j++]}"
DST_API_ENDPOINT="${XPATH_ELEMENTS[j++]:-$API_ENDPOINT}"
DST_IP="${XPATH_ELEMENTS[j++]:-$IP}"
DST_CPG="${XPATH_ELEMENTS[j++]:-$CPG}"
DST_THIN="${XPATH_ELEMENTS[j++]:-$THIN}"
DST_DEDUP="${XPATH_ELEMENTS[j++]:-$DEDUP}"
DST_COMPRESSION="${XPATH_ELEMENTS[j++]:-$COMPRESSION}"
DST_NAMING_TYPE="${XPATH_ELEMENTS[j++]:-$NAMING_TYPE}"
DST_PORTALS="${XPATH_ELEMENTS[j++]:-$PORTALS}"
DST_PORTALS_NUM="${XPATH_ELEMENTS[j++]:-$PORTALS_NUM}"
DST_QOS_ENABLE="${XPATH_ELEMENTS[j++]:-$QOS_ENABLE}"
DST_QOS_PRIORITY="${XPATH_ELEMENTS[j++]:-$QOS_PRIORITY}"
DST_QOS_MAX_IOPS="${XPATH_ELEMENTS[j++]:-$QOS_MAX_IOPS}"
DST_QOS_MIN_IOPS="${XPATH_ELEMENTS[j++]:-$QOS_MIN_IOPS}"
DST_QOS_MAX_BW="${XPATH_ELEMENTS[j++]:-$QOS_MAX_BW}"
DST_QOS_MIN_BW="${XPATH_ELEMENTS[j++]:-$QOS_MIN_BW}"
DST_QOS_LATENCY="${XPATH_ELEMENTS[j++]:-$QOS_LATENCY}"

if [ "$DST_TM_MAD" != "3par" ]; then
    error_message "Destination datastore TM_MAD is not 3par"
    exit 1
fi

#-------------------------------------------------------------------------------
# Start actions for directory transfer
#-------------------------------------------------------------------------------

if [ `is_disk $DST_PATH` -eq 0 ]; then
    # VM is in unknown state, SRC_HOST probably in failed state
    if [[ "$LCM_STATE" =~ ^(60|61)$ ]]; then
      log "Not moving files from $SRC_HOST in FT mode"
      exit 0
    fi

    SRC_RES="one-vm-${VMID}-checkpoint"
    SRC_DEV="/dev/drbd/by-res/${SRC_RES}/0"

    SNAPSHOTS_NUM=$($LINSTOR -m s l -r one-vm-10996-disk-2 | $JQ '.[] | length')

    if [ "$SNAPSHOTS_NUM" -ne 0 ]; then
        error_message "Image has snapshots. Snapshots transfering is not supported"
        exit 1
    fi

    # Transfer checkpoint across system ds (if any)
    # -------- Create image in case of multiple 3pars ------------
    SIZE=$($LINSTOR -m --output-version v0 volume-definition list -r "$SRC_RES" | $JQ -r '.[].rsc_dfns[0].vlm_dfns[0].vlm_size' | awk '{printf "%3.0f\n", ($1/1024)+2}')

    DST_NAME_WWN=$(${DRIVER_PATH}/../../datastore/3par/3par.py createVmVV -a $DST_API_ENDPOINT -i $DST_IP -s $SECURE -u $USERNAME \
                                    -p $PASSWORD -nt $DST_NAMING_TYPE -tpvv $DST_THIN -tdvv $DST_DEDUP -compr $DST_COMPRESSION \
                                    -vi $VMID -id checkpoint -c $DST_CPG -sz $SIZE -co "$VM_NAME")
    
    if [ $? -ne 0 ]; then
      error_message "$DST_NAME_WWN"
      exit 1
    fi
    
    DST_NAME=$(get_vv_name "$DST_NAME_WWN")
    DST_WWN=$(get_vv_wwn "$DST_NAME_WWN")
    
    log "Add disk to VM VV Set"
    VVSET=$(${DRIVER_PATH}/../../datastore/3par/3par.py addVolumeToVVSet -a $DST_API_ENDPOINT -i $DST_IP -s $SECURE -u $USERNAME -p $PASSWORD \
                        -nt $DST_NAMING_TYPE -n $DST_NAME -vi $VMID -co "$VM_NAME")
    
    if [ $? -ne 0 ]; then
        error_message "$VVSET"
        exit 1
    fi
    
    if [ "$QOS_ENABLE" == "YES" ]; then
        log "Create QoS Policy"
        QOS=$(${DRIVER_PATH}/../../datastore/3par/3par.py createQosPolicy -a $DST_API_ENDPOINT -i $DST_IP -s $SECURE -u $USERNAME -p $PASSWORD \
                            -nt $DST_NAMING_TYPE -n $DST_NAME -vi $VMID -qp $QOS_PRIORITY -qxi $DST_QOS_MAX_IOPS -qmi $DST_QOS_MIN_IOPS \
                            -qxb $DST_QOS_MAX_BW -qmb $DST_QOS_MIN_BW -ql $DST_QOS_LATENCY)
    
        if [ $? -ne 0 ]; then
            error_message "$QOS"
            exit 1
        fi
    fi

    # ------- Activate checkpoint on DST (skip for EPILOG_STOP + EPILOG_UNDEPLOY) -----------
    if ! [[ "$LCM_STATE" =~ ^(10|30|41|42)$ ]]; then

        DST_HOST_ISCSI_NAME=$($SSH $DST_HOST sudo cat /etc/iscsi/initiatorname.iscsi | awk -F= '{print $2}')
        DST_HOST_3PAR=$(${DRIVER_PATH}/../../datastore/3par/3par.py setupHost -a $DST_API_ENDPOINT -i $DST_IP -s $SECURE -u $USERNAME -p $PASSWORD \
            -hs $DST_HOST -in $DST_HOST_ISCSI_NAME)
        if [ $? -ne 0 ]; then
            error_message "$DST_HOST_3PAR"
            exit 1
        fi
    
        ssh_exec_and_log "$DST_HOST" "$(iscsi_login "$DST_PORTALS" "$DST_PORTALS_NUM")"

        LUN=$(${DRIVER_PATH}/../../datastore/3par/3par.py exportVV -a $DST_API_ENDPOINT -i $DST_IP -s $SECURE -u $USERNAME -p $PASSWORD \
                                                                    -n $DST_NAME -hs $DST_HOST)
        if [ $? -ne 0 ]; then
            error_message "$LUN"
            exit 1
        fi

        DISCOVER_CMD=$(cat <<EOF
            set -e
            mkdir -p "$DST_DIR"
            $(discover_lun "$LUN" "$DST_WWN")
            mkdir -p "$DST_PATH"
            ln -sf "\$DEV" "$DST_PATH/checkpoint"
EOF
)
        
        ssh_exec_and_log "$DST_HOST" "$DISCOVER_CMD" \
            "Error registering $DST_NAME_WWN to $DST_HOST"
    fi


    # ------- Perform transfer checkpoint in case of different datastores -----------
    
    # Attach diskless resource on destination host
    linstor_attach_diskless "$DST_HOST" "$SRC_RES" "$DISKLESS_POOL"

    # Transfer checkpoint across system ds (only for different system datastores)
    COPY_CMD=$(cat <<EOF
        set -e -o pipefail
        dd \if=${SRC_DEV} of=/dev/mapper/3$DST_WWN bs=${DD_BLOCK_SIZE:-64k} conv=${DD_CONV:-sparse}
        sync
EOF
)
    
    ssh_exec_and_log "$DST_HOST" "$COPY_CMD" \
        "Error copying $SRC_DEV to $DST_WWN in $SRC_HOST"
    
    # ------- Deactivate checkpoint on SRC (skip for PROLOG_RESUME + PROLOG_UNDEPLOY) -----------
    if ! [[ "$LCM_STATE" =~ ^(9|31|49|50)$ ]]; then
        linstor_exec_and_log \
            "resource-definition delete $SRC_RES"
    fi

    # for EPILOG_STOP + EPILOG_UNDEPLOY, delete source path and exit
    if [[ "$LCM_STATE" =~ ^(10|30|41|42)$ ]]; then
        ssh_exec_and_log "$SRC_HOST" "rm -rf '$SRC_PATH'" \
            "Error removing target path to prevent overwrite errors"
        exit 0
    fi

    ssh_make_path "$DST_HOST" "$DST_DIR"

    # for PROLOG_RESUME + PROLOG_UNDEPLOY, we have nothing to do
    if [[ "$LCM_STATE" =~ ^(9|31|49|50)$ ]]; then
        exit 0
    fi

    log "Moving $SRC to $DST"

    TAR_SSH=$(cat <<EOF
    set -e -o pipefail
    
    $TAR -C $SRC_DS_DIR --sparse -cf - $SRC_VM_DIR | $SSH $DST_HOST '$TAR -C $DST_DIR --skip-old-files --sparse -xf -'
    rm -rf $SRC_PATH
EOF
)

    ssh_forward ssh_exec_and_log "$SRC_HOST" "$TAR_SSH" "Error copying disk directory to target host"

    # Delete disk from old system ds (for different system datastores)
    linstor_exec_and_log \
                "resource-definition delete $SRC_RES"
    
    exit 0
fi

#-------------------------------------------------------------------------------
# Start actions for disk transfer
#-------------------------------------------------------------------------------

if [ -z "$DST_PORTALS" ]; then
    DST_PORTALS=$(${DRIVER_PATH}/../../datastore/3par/3par.py getIscsiPortals -a $DST_API_ENDPOINT -i $DST_IP -s $SECURE -u $USERNAME \
                                                                -p $PASSWORD ${DST_PORTALS_NUM:+--sort YES})
    if [ $? -ne 0 ]; then
        error_message "$DST_PORTALS"
        exit 1
    fi
fi

# Transfer system ds image
if [ "$CLONE" = "YES" ] || [ "$VOLATILE" = "YES" ]; then
      # Non-persistent image case
      DST_NAME_WWN=$(${DRIVER_PATH}/../../datastore/3par/3par.py createVmVV -a $DST_API_ENDPOINT -i $DST_IP -s $SECURE -u $USERNAME \
                                      -p $PASSWORD -nt $DST_NAMING_TYPE -tpvv $DST_THIN -tdvv $DST_DEDUP -compr $DST_COMPRESSION \
                                      -vi $VMID -id $DISK_ID -c $DST_CPG -sz $SIZE -co "$VM_NAME")
else
      # Persistent image case
      DST_NAME_WWN=$(${DRIVER_PATH}/../../datastore/3par/3par.py createVV -a $DST_API_ENDPOINT -i $IP -s $SECURE -u $USERNAME -p $PASSWORD -nt $DST_NAMING_TYPE \
                                    -tpvv $DST_THIN -tdvv $DST_DEDUP -compr $DST_COMPRESSION -id $IMAGE_ID -c $DST_CPG -sz $SIZE -co "$IMAGE")
fi

if [ $? -ne 0 ]; then
  error_message "$DST_NAME_WWN"
  exit 1
fi

DST_NAME=$(get_vv_name "$DST_NAME_WWN")
DST_WWN=$(get_vv_wwn "$DST_NAME_WWN")

log "Add disk to VM VV Set"
VVSET=$(${DRIVER_PATH}/../../datastore/3par/3par.py addVolumeToVVSet -a $DST_API_ENDPOINT -i $DST_IP -s $SECURE -u $USERNAME -p $PASSWORD \
                    -nt $DST_NAMING_TYPE -n $DST_NAME -vi $VMID -co "$VM_NAME")

if [ $? -ne 0 ]; then
    error_message "$VVSET"
    exit 1
fi

if [ "$QOS_ENABLE" == "YES" ]; then
    log "Create QoS Policy"
    QOS=$(${DRIVER_PATH}/../../datastore/3par/3par.py createQosPolicy -a $DST_API_ENDPOINT -i $DST_IP -s $SECURE -u $USERNAME -p $PASSWORD \
                        -nt $DST_NAMING_TYPE -n $DST_NAME -vi $VMID -qp $QOS_PRIORITY -qxi $DST_QOS_MAX_IOPS -qmi $DST_QOS_MIN_IOPS \
                        -qxb $DST_QOS_MAX_BW -qmb $DST_QOS_MIN_BW -ql $DST_QOS_LATENCY)

    if [ $? -ne 0 ]; then
        error_message "$QOS"
        exit 1
    fi
fi

# ------- Activate disk on DST (skip for EPILOG_STOP + EPILOG_UNDEPLOY) -----------

if ! [[ "$LCM_STATE" =~ ^(10|30|41|42)$ ]]; then
    DST_HOST_ISCSI_NAME=$($SSH $DST_HOST sudo cat /etc/iscsi/initiatorname.iscsi | awk -F= '{print $2}')
    DST_HOST_3PAR=$(${DRIVER_PATH}/../../datastore/3par/3par.py setupHost -a $DST_API_ENDPOINT -i $DST_IP -s $SECURE -u $USERNAME -p $PASSWORD \
        -hs $DST_HOST -in $DST_HOST_ISCSI_NAME)
    if [ $? -ne 0 ]; then
        error_message "$DST_HOST_3PAR"
        exit 1
    fi
    
    ssh_exec_and_log "$DST_HOST" "$(iscsi_login "$DST_PORTALS" "$DST_PORTALS_NUM")"
    
    log "Mapping $DST_NAME_WWN to $DST_HOST"
    
    DST_LUN=$(${DRIVER_PATH}/../../datastore/3par/3par.py exportVV -a $DST_API_ENDPOINT -i $DST_IP -s $SECURE -u $USERNAME -p $PASSWORD \
                                                                -n $DST_NAME -hs $DST_HOST)
    
    if [ $? -ne 0 ]; then
        error_message "$DST_LUN"
        exit 1
    fi
    
    DISCOVER_CMD=$(cat <<EOF
        set -e
        mkdir -p "$DST_DIR"
        $(discover_lun "$DST_LUN" "$DST_WWN")
        ln -sf "\$DEV" "$DST_PATH"
EOF
)
    
    ssh_exec_and_log "$DST_HOST" "$DISCOVER_CMD" \
        "Error registering $DST_NAME_WWN to $DST_HOST"

    # Attach diskless resource on destination host
    linstor_attach_diskless "$DST_HOST" "$SRC_RES" "$DISKLESS_POOL"

    # ------- Perform transfer in case of different datastores -----------
    COPY_CMD=$(cat <<EOF
        set -e -o pipefail
        dd \if=${SRC_DEV} of=/dev/mapper/3$DST_WWN bs=${DD_BLOCK_SIZE:-64k} conv=${DD_CONV:-sparse}
        sync
EOF
)
    
    ssh_forward ssh_exec_and_log "$DST_HOST" "$COPY_CMD" \
        "Error copying $SRC_DEV to $DST_WWN in $DST_HOST"
fi


# ------- Deactivate disk on SRC (skip for PROLOG_RESUME + PROLOG_UNDEPLOY) -----------

if ! [[ "$LCM_STATE" =~ ^(9|31|49|50)$ ]]; then
    log "Removing $SRC_RES"
    
    # src host in failed state, can not flush disk before unexport
    if [ $LCM_STATE -ne 60 ] && [ $LCM_STATE -ne 61 ]; then
        linstor_exec_and_log \
            "resource-definition delete $SRC_RES"
    fi

fi
